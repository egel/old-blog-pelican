<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Egel's Blog - terminal</title><link href="http://egel.pl/" rel="alternate"></link><link href="http://egel.pl/feeds/tag/terminal.atom.xml" rel="self"></link><id>http://egel.pl/</id><updated>2017-06-23T00:00:00+02:00</updated><entry><title>Git pre commit email blocker</title><link href="http://egel.pl/git-pre-commit-email-blocker.html" rel="alternate"></link><published>2017-03-20T00:00:00+01:00</published><updated>2017-06-23T00:00:00+02:00</updated><author><name>Maciej Sypień</name></author><id>tag:egel.pl,2017-03-20:/git-pre-commit-email-blocker.html</id><summary type="html">&lt;p&gt;Presenting a simple solution that allows only selected git users to commit in local copy of repository.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since quite a while Git exists in the big market of software development. Many users using it in the daily basis as standard way of committing their work for employer and it also became de facto standard way of developing in the Open Source world.&lt;/p&gt;
&lt;p&gt;I also very much like using Git, but after time I discover my way of working with git especially when need to commit many parts for different employers and almost all the time I have at least 2 local git user (do not confuse with gitlab/github or other user accounts).&lt;/p&gt;
&lt;p&gt;Due to usually many employers require a specific company credential while communicating with their main repository server, so I figured out that I can have multiple users in same file, but activate each when I need it.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# ~/.gitconfig

[include]
  # For user, email, ect.
  ; path = ~/.gitconfig.local   # ; make configuration inactive
  path = ~/.gitconfig.local_work
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Private configuration
# ~/.gitconfig.local

[user]
    name = Maciej Sypień
    email = firstname.lastname@example.com

[github]
    user = githubUsername
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Public work configuration
# ~/.gitconfig.local_work

[user]
    name = Maciej Sypień
    email = firstname.lastname@workmail.com
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This simple solution give me an opportunity to have multiple Git local users with different credentials hidden into files &lt;code&gt;~/.gitconfig.local_&amp;lt;company&amp;gt;&lt;/code&gt; and it can be used for my personal accounts, or for specific employers - the field of usage is almost endless.&lt;/p&gt;
&lt;p&gt;When I want to switch between different users (for example I am doing something for my personal stuff at weekend and on Monday morning using same laptop begin my work as employer of company ABC) I just commit &lt;code&gt;~/.gitconfig.local&lt;/code&gt; and enable specific config for work &lt;code&gt;~/.gitconfig.local_work&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But hey, no one is infallible, and many times I commit as a wrong user to some repository that I should not commit from personal email address. Therefore, since a while, I wondered:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"How to disable some not authorized git users to commit in selected local repositories".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are so many ways how to achieve this task, but I decide to user Git's hooks feature and I wrote simple program, which checks locally enabled Git user's email before a real user will commit.&lt;/p&gt;
&lt;p&gt;This simple solution may save a lot of your time (and potential rebase) especially when real user (you) have multiple git accounts - for example when you're a freelancer (or project manager) and you need to commit to multiple projects as completely different git user for some reasons.&lt;/p&gt;
&lt;p&gt;So what might be some solution to this problem?&lt;/p&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;Below I present some solution and how to implement it using simple pre-commit hook script into any git repository which using git higher then v1.8.4.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# An example hook script to verify what is about to be committed.&lt;/span&gt;
&lt;span class="c1"&gt;# Called by &amp;quot;git commit&amp;quot; with no arguments.  The hook should&lt;/span&gt;
&lt;span class="c1"&gt;# exit with non-zero status after issuing an appropriate message if&lt;/span&gt;
&lt;span class="c1"&gt;# it wants to stop the commit.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# To enable this hook, rename this file to &amp;quot;pre-commit&amp;quot;.&lt;/span&gt;

&lt;span class="nv"&gt;WHITE_LIST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
accept_email&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;CURRENT_USER_EMAIL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git config --list &lt;span class="p"&gt;|&lt;/span&gt; grep user.email &lt;span class="p"&gt;|&lt;/span&gt; awk -F&lt;span class="s2"&gt;&amp;quot;=&amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
  &lt;span class="nv"&gt;substring&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CURRENT_USER_EMAIL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;substring&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not match&amp;quot;&lt;/span&gt; &amp;gt; /dev/null
    &lt;span class="nv"&gt;WHITE_LIST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;WHITE_LIST&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\n&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;substring&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

accept_email &lt;span class="s2"&gt;&amp;quot;john.doe@example.com&amp;quot;&lt;/span&gt;
accept_email &lt;span class="s2"&gt;&amp;quot;johndoe@example.com&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Your current git user.email &amp;lt;%s&amp;gt; NOT MATCH any approved emails\n&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CURRENT_USER_EMAIL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%b\n\n&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;WHITE_LIST&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Check ~/.gitconfig for more\n&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What it does? Basically before each commit (&lt;code&gt;git commit -m "whatever"&lt;/code&gt;) it checks what are allowed email addresses for this repository and allow or reject user with information that only specific group of emails are allowed to commit in this repository.&lt;/p&gt;
&lt;h4&gt;Installation&lt;/h4&gt;
&lt;p&gt;Save above snippet save as &lt;code&gt;.git/hooks/pre-commit&lt;/code&gt; into your git repository and &lt;strong&gt;do not forget to make the file executable&lt;/strong&gt; &lt;code&gt;chmod +x .git/hooks/pre-commit&lt;/code&gt;. Modify the list of email addresses and that's it.&lt;/p&gt;
&lt;p&gt;Now you can be happy git user with simple pre-commit email guardian :)&lt;/p&gt;</content><category term="git"></category><category term="terminal"></category></entry><entry><title>Tasting of Arch Linux</title><link href="http://egel.pl/tasting-of-arch-linux.html" rel="alternate"></link><published>2016-11-18T00:00:00+01:00</published><updated>2016-11-18T00:00:00+01:00</updated><author><name>Maciej Sypień</name></author><id>tag:egel.pl,2016-11-18:/tasting-of-arch-linux.html</id><summary type="html">&lt;p&gt;Whole process of installation and my reflections upon the Arch Linux.&lt;/p&gt;</summary><content type="html">&lt;!--
&lt;div class="intro-article-image-sm" markdown="1"&gt;
  ![Linux logo]({filename}/images/archlinux_logo.png)
&lt;/div&gt;
--&gt;

&lt;p&gt;I have to admit that installation of Arch Linux can be difficult for many people, but that exactly is real fun!&lt;/p&gt;
&lt;p&gt;Few days ago I've tried to install Arch on my virtual machine then on my laptop and I could not find anything that I didn't like. Yeah, I agree that there are many decisions you have to decide during installation of Arch. For example: manual setting up of partitions, current date, downloading all related packages, then finally install whole system. For many (unfortunately) it's just the beginning, because after the installation you have a bare system - console and that is it. You need to install and configure GUI and other important stuff on your own, but actually that is real fun!&lt;/p&gt;
&lt;p&gt;The longest part for me was the downloading and installation packages from the Net. This took me around 45 minutes to download the system and GUI interface (gnome).&lt;/p&gt;
&lt;p&gt;Beside the installation process, I love the whole idea of having one release in contrast to Ubuntu. You have only one major version and you stick to it - until that community decide to change it.&lt;/p&gt;
&lt;p&gt;Below I would like to share my whole process and preferences during the setting up the Arch.&lt;/p&gt;
&lt;h3&gt;Partitioning hard drives&lt;/h3&gt;
&lt;p&gt;Display all drives on PC. I have only one drive called &lt;code&gt;/dev/sda&lt;/code&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fdisk -l
cfdisk /dev/sda
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I've got 500GB drive (with real space of 465GB), but the drive has one hidden partition for WinRecovery with size around 18GB (I'm not using it right now).&lt;/p&gt;
&lt;p&gt;So, now I split a bit rest of my drive space for 2 additional partitions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Many IT guys will be whimper a bit of having only one general partition for &lt;code&gt;/&lt;/code&gt;, but I found it more useful for me in daily work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you have disk bigger then 2TB use &lt;a href="https://en.wikipedia.org/wiki/GUID_Partition_Table"&gt;&lt;code&gt;GPT&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;DOS&lt;/code&gt;, if using of &lt;code&gt;MBR&lt;/code&gt; is not obligatory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;18GB hidden WinRecovery partition (not used)&lt;/li&gt;
&lt;li&gt;16GB for &lt;code&gt;/swap&lt;/code&gt; with type &lt;code&gt;linux swap&lt;/code&gt; (82)&lt;/li&gt;
&lt;li&gt;~431GB for &lt;code&gt;/&lt;/code&gt; with &lt;strong&gt;bootable&lt;/strong&gt; flag and type &lt;code&gt;linux&lt;/code&gt; (83)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more take a look on &lt;a href="https://wiki.archlinux.org/index.php/partitioning"&gt;partitioning page&lt;/a&gt; on Arch wiki.&lt;/p&gt;
&lt;h3&gt;Downloading basic packages&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;I have tried installation on my virtual box then again on my laptop. The problem that I face to, was internet connection through WiFi. There is several way of doing this. You can use &lt;code&gt;wifi-menu&lt;/code&gt; to setup temporary connection for downloading packages and after installation setup &lt;code&gt;network-manager&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this part we will format our partitions and enable Linux SWAP:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mksf.ext4 /dev/sda2
mount /dev/sda2 /mnt
mkswap /dev/sda1
swapon /dev/sda1
pacstrap /mnt base base-devel &lt;span class="c1"&gt;# most basic packages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you don't want to install anything more for now, you can omit below packages, but I recommend to install them also just for more efficient usage before setting up the &lt;code&gt;network-manager&lt;/code&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacstrap /mnt dialog wpa_supplicant network-manager-applet ldns &lt;span class="c1"&gt;# for connecting via wifi-menu after install&lt;/span&gt;
pacstrap /mnt sudo zsh wget curl &lt;span class="c1"&gt;# additional packages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Configuring the installation&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;arch-chroot /mnt
passwd root
vi /etc/locale.gen    &lt;span class="c1"&gt;# uncoment all for you lang: en_US&lt;/span&gt;
locale-gen
ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime
timedatectl set-ntp &lt;span class="nb"&gt;true&lt;/span&gt;
hwclock --systohc
&lt;span class="nb"&gt;echo&lt;/span&gt; vbox &amp;gt; /etc/hostname

&lt;span class="c1"&gt;# installing grub&lt;/span&gt;
pacman -S grub-bios
grub-install /dev/sda

&lt;span class="c1"&gt;# generate system info file&lt;/span&gt;
mkinitcpio -p linux

grub-mkconfig -o /boot/grub/grub.cfg
&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="c1"&gt;# from /mnt root&lt;/span&gt;

&lt;span class="c1"&gt;# generate partition info&lt;/span&gt;
genfstab /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
umount -R /mnt
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;This password is the most important of all. Write it down somewhere to not forget, we will need it later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Connect to internet&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip link
systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; dhcpcd.service
systemctl start dhcpcd.service
ping google.com
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;or copy profile from examples&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp /etc/netctl/examples/ethernet-dhcp /etc/netctl/
vim /etc/netctl/ethernet-dhcp    &lt;span class="c1"&gt;# change Interface=enp0s3&lt;/span&gt;
netctl &lt;span class="nb"&gt;enable&lt;/span&gt; ethernet-dhcp
netctl start ethernet-dhcp
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;If above not work try manual install upon result from &lt;code&gt;ip link&lt;/code&gt;, in my case the Ethernet device name is called &lt;code&gt;enp0s3&lt;/code&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip link
dhcpcd enp0s3
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/blockquote&gt;
&lt;h3&gt;Create user&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;useradd -m -g users -G wheel,storage,power,sys,adm -s /bin/zsh maciej
passwd maciej
vim /etc/sudoers    &lt;span class="c1"&gt;# Uncomment: wheel ALL=(ALL) ALL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Now SWITCH to new created user!&lt;/strong&gt;
To do it &lt;code&gt;logout&lt;/code&gt; from root user just to safety purpose.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why? Because when you use &lt;strong&gt;root&lt;/strong&gt; you can do everything (it is good when you now what you're doing), but it's not about what you can or can't do, it's about you. You're more secure from yourself actions for example just using &lt;code&gt;sudo&lt;/code&gt; program.&lt;/p&gt;
&lt;p&gt;It's good approach - but hey, you already know this, right? ;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Further steps&lt;/h3&gt;
&lt;p&gt;Now we'll install additional useful stuff. You may or may not to install it, it's up to you.&lt;/p&gt;
&lt;p&gt;My &lt;strong&gt;must have&lt;/strong&gt; list.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -Syu
sudo pacman -S gvim git tmux htop jack2
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For bash I usually install &lt;code&gt;bash-completion&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For checking hardware &lt;code&gt;lshw hwinfo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For mini-jack support &lt;code&gt;jack2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For supporting different drives I install &lt;code&gt;exfat-utils dosfstools jfsutils ntfs-3g mtools&lt;/code&gt; and for partitioning I like &lt;code&gt;gparted&lt;/code&gt; and &lt;code&gt;gpart&lt;/code&gt; for fixing drives.&lt;/li&gt;
&lt;li&gt;For graphics &lt;code&gt;gimp inkscape&lt;/code&gt; and &lt;code&gt;imagemagick&lt;/code&gt; for console operations.&lt;/li&gt;
&lt;li&gt;For FTP &lt;code&gt;filezilla&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For SSH &lt;code&gt;openssh&lt;/code&gt; is obvious choice!&lt;/li&gt;
&lt;li&gt;For LaTeX I usually install all packages &lt;code&gt;texlive-most texlive-lang&lt;/code&gt; and &lt;code&gt;texstudio&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Install display manager&lt;/h3&gt;
&lt;p&gt;I choose &lt;a href="https://www.gnome.org/gnome-3/"&gt;Gnome3&lt;/a&gt; for my graphical environment, because now many problems has been fixed by maintainers and it's looks quite nice.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -S gnome gnome-extra gnome-tweek-tool
sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; gdm.service
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Reboot system with &lt;code&gt;sudo reboot&lt;/code&gt; and we're done with installation of GUI.&lt;/p&gt;
&lt;h3&gt;Install the nVidia drivers&lt;/h3&gt;
&lt;p&gt;First we check which graphic card we have:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lspci -k &lt;span class="p"&gt;|&lt;/span&gt; grep -A &lt;span class="m"&gt;2&lt;/span&gt; -E &lt;span class="s2"&gt;&amp;quot;(VGA|3D)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In my laptop I've got &lt;strong&gt;GeForce GT 425m&lt;/strong&gt;, so according to &lt;a href=""&gt;Arch Linux wiki about nvidia&lt;/a&gt;. I have to install &lt;code&gt;nvidia nvidia-libgl&lt;/code&gt; and enable service.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It might wants to uninstall &lt;code&gt;mesa-libgl&lt;/code&gt; package (this package have some problems with handling animations for some graphic cards), so agree for that by pressing (Y).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -S nvidia nvidia-utils nvidia-libgl
sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; nvidia-persistenced.service
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Then we have to reboot the system and check &lt;code&gt;lsmod | grep nvidia&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;The end&lt;/h3&gt;
&lt;p&gt;Now you should have full operational Arch Linux system - and yes, you should be proud of yourself!&lt;/p&gt;
&lt;p&gt;Thanks for staying with me to the end. I hope that little tutorial of mine, help you a bit during your journey of setting up you private Arch instance ;)&lt;/p&gt;</content><category term="linux"></category><category term="arch"></category><category term="terminal"></category></entry><entry><title>Git push guardian</title><link href="http://egel.pl/git-push-guardian.html" rel="alternate"></link><published>2016-05-16T00:00:00+02:00</published><updated>2016-05-16T00:00:00+02:00</updated><author><name>Maciej Sypień</name></author><id>tag:egel.pl,2016-05-16:/git-push-guardian.html</id><summary type="html">&lt;!--
Summary:
--&gt;

&lt;!--
&lt;div class="intro-article-image-md" markdown="1"&gt;
  ![LaTeX logo]({filename}/images/git_logo-mini.png)
&lt;/div&gt;
--&gt;

&lt;p&gt;Recently I wondering how to improve my workflow with Git. I came across the Web
and found some article which pointed on git hooks and were introduced in
version 1.8.2.&lt;/p&gt;
&lt;p&gt;That cool feature, allows to execute some code before/after some actions made in
git. My team have …&lt;/p&gt;</summary><content type="html">&lt;!--
Summary:
--&gt;

&lt;!--
&lt;div class="intro-article-image-md" markdown="1"&gt;
  ![LaTeX logo]({filename}/images/git_logo-mini.png)
&lt;/div&gt;
--&gt;

&lt;p&gt;Recently I wondering how to improve my workflow with Git. I came across the Web
and found some article which pointed on git hooks and were introduced in
version 1.8.2.&lt;/p&gt;
&lt;p&gt;That cool feature, allows to execute some code before/after some actions made in
git. My team have decided that we will compleate our tasks into feature branches,
and to do it so, we mark our main branches: &lt;code&gt;master&lt;/code&gt;, &lt;code&gt;stage&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt; as
protected. That means, only users with master access or grater (for repository),
can push directly to this branches. I have that privilage, but switching between
so many branches, checking, pushing, checking, pushing - this all can confuse a
mind for a second.&lt;/p&gt;
&lt;p&gt;Than I realize, if there any available option to prevent important actions (like
push) on those protected branches. And puff...there git hooks came in on the
stage.&lt;/p&gt;
&lt;h2&gt;Guardian Script&lt;/h2&gt;
&lt;p&gt;With some examples on web and git documentation, I wrote simple git &lt;strong&gt;pre-push&lt;/strong&gt;
script that will check on which branch you are in and it will ask you "Are you
intend to push?" to those protected branches.&lt;/p&gt;
&lt;p&gt;Full script are available into my gist on github &lt;a href="https://gist.github.com/egel/2058f19cf78df84ade741b7a77a38006"&gt;HERE - git pre-push&lt;/a&gt;,
but I also paste this snippet here, to make the article complete.&lt;/p&gt;
&lt;h3&gt;Implemented features:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Array with protected branches (easy to maintain)&lt;/li&gt;
&lt;li&gt;Base terminal colors to improve visibility&lt;/li&gt;
&lt;li&gt;Question that only work when confirm with enter (time to wonder it is
    correct action)&lt;/li&gt;
&lt;li&gt;Default value of question set to &lt;code&gt;No&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Message of committed action&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Things which may be improved in the future:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Download list of protected branches direct from repository&lt;/li&gt;
&lt;li&gt;Add support for some popular flags like: &lt;code&gt;--force&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# General colors&lt;/span&gt;
&lt;span class="nv"&gt;black&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\x1B[0;30m&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;red&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\x1B[0;31m&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;green&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\x1B[0;32m&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# &amp;#39;\e[1;32m&amp;#39; is too bright for white bg.&lt;/span&gt;
&lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\x1B[1;34m&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;yellow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\x1B[0;33m&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;purple&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\x1B[1;35m&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;cyan&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\x1B[0;36m&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;endColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\x1B[0m&amp;#39;&lt;/span&gt;


&lt;span class="nv"&gt;protected_branches&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; master develop &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;current_branch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git symbolic-ref HEAD &lt;span class="p"&gt;|&lt;/span&gt; sed -e &lt;span class="s1"&gt;&amp;#39;s,.*/\(.*\),\1,&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;protected_branches&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;current_branch&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; -en &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;yellow&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;[Git pre-push]&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;endColor&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; You&amp;#39;re about to push to &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;red&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;endColor&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, is that what you intended?&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;read&lt;/span&gt; -p &lt;span class="s2"&gt;&amp;quot; [y/N] &amp;quot;&lt;/span&gt; -r &amp;lt; /dev/tty
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REPLY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; egrep -E &lt;span class="s1"&gt;&amp;#39;^[yY]$&amp;#39;&lt;/span&gt; &amp;gt; /dev/null
    &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;Continue of pushing to &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;red&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;endColor&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
      &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;# push will execute&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; -en &lt;span class="s2"&gt;&amp;quot;Abort pushing to &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;red&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;endColor&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\n&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# push will not execute&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;# push will execute when won&amp;#39;t match protected_branches&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;How to use it?&lt;/h2&gt;
&lt;p&gt;You need to enter into your git project &lt;code&gt;~/workspace/&amp;lt;your_project&amp;gt;&lt;/code&gt;. In this
folder you should have a &lt;code&gt;.git/hooks&lt;/code&gt; directory (if not you have poprably git
older then 1.8.2). Then save above file as
&lt;code&gt;~/workspace/&amp;lt;your_project&amp;gt;/.git/hooks/pre-push&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do not forget to add &lt;code&gt;chmod +x pre-push&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now every time you will push to one of &lt;code&gt;protected_branches&lt;/code&gt; listed into the
file, Git will ask you is that was your intend action. For git masters, this
little trick can save a day ;)&lt;/p&gt;</content><category term="git"></category><category term="terminal"></category></entry><entry><title>Install the latest nVidia drivers for Linux</title><link href="http://egel.pl/install-the-latest-nvidia-drivers-for-linux.html" rel="alternate"></link><published>2015-11-02T00:00:00+01:00</published><updated>2015-11-02T00:00:00+01:00</updated><author><name>Maciej Sypień</name></author><id>tag:egel.pl,2015-11-02:/install-the-latest-nvidia-drivers-for-linux.html</id><summary type="html">&lt;!--
&lt;div class="intro-article-image-sm" markdown="1"&gt;
  ![Tmux]({filename}/images/terminal_icon.png)
&lt;/div&gt;
--&gt;

&lt;p&gt;The time has come that I had to face with reinstall of the Nvidia driver on my Mint
17 distribution.&lt;/p&gt;
&lt;p&gt;Well, while using my distro, there appear couple of problems with "Nvidia proprietary drivers".
As a pro Linux guy (laugh),  I pressed &lt;code&gt;ctrl&lt;/code&gt;+&lt;code&gt;alt&lt;/code&gt;+&lt;code&gt;F1&lt;/code&gt;, and got a black screen …&lt;/p&gt;</summary><content type="html">&lt;!--
&lt;div class="intro-article-image-sm" markdown="1"&gt;
  ![Tmux]({filename}/images/terminal_icon.png)
&lt;/div&gt;
--&gt;

&lt;p&gt;The time has come that I had to face with reinstall of the Nvidia driver on my Mint
17 distribution.&lt;/p&gt;
&lt;p&gt;Well, while using my distro, there appear couple of problems with "Nvidia proprietary drivers".
As a pro Linux guy (laugh),  I pressed &lt;code&gt;ctrl&lt;/code&gt;+&lt;code&gt;alt&lt;/code&gt;+&lt;code&gt;F1&lt;/code&gt;, and got a black screen with flashing cursor. YES! - I shouted immediately - the console isn't broken for good - I sad to myself in mind.&lt;/p&gt;
&lt;p&gt;I red somewhere, that the problem could have something with the framebuffer. So I made few modifications to &lt;code&gt;/etc/default/grub&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please remember, backup always go first!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo cp /etc/default/grub /etc/default/grub.bak
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now edit the grub file by entering&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /etc/default/grub
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;While editing in your favorite editor (I choose &lt;code&gt;vim&lt;/code&gt;), uncomment the lines, simply by removing the &lt;code&gt;#&lt;/code&gt; in front of those lines.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your monitor support better resolutions you can change &lt;code&gt;GRUB_GFXMODE&lt;/code&gt; for another value, my highest was &lt;code&gt;1024x768&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GRUB_TERMINAL=console
GRUB_GFXMODE=640x480
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Save the file and run &lt;code&gt;update-grub&lt;/code&gt; to implement the changes&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo update-grub
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now, I had to resolve which display manager do I have on my Mint?&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /etc/X11/default-display-manager
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In my case, it was &lt;code&gt;mdm&lt;/code&gt;, so then I stopped display manager, installed drivers and enabled display manager again.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service mdm stop
chmod +x /path/to/downloaded/driver/NVIDIA-Linux-x86_64-*.run
sudo sh /path/to/downloaded/driver/NVIDIA-Linux-x86_64-*.run
sudo service mdm start
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That's it. After pressing &lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;F8&lt;/code&gt; the graphical interface showed up as well as a smile on my face :)&lt;/p&gt;</content><category term="linux"></category><category term="terminal"></category><category term="console"></category></entry></feed>